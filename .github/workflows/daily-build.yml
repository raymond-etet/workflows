# 工作流的名称，会显示在 GitHub 仓库的 "Actions" 标签页中
name: Daily Rules Generation

# 触发工作流的事件
on:
  # 1. 定时触发：使用 cron 语法
  schedule:
    # 每天 00:00 UTC 时间执行。这对应于北京时间 (UTC+8) 的早上 8:00。
    - cron: '0 0 * * *'
    
  # 2. 手动触发：允许您在 Actions 标签页手动点击 "Run workflow" 按钮来测试
  workflow_dispatch:

# 定义工作任务
jobs:
  # 任务的唯一 ID
  build-and-commit:
    # 指定运行此任务的虚拟机环境
    runs-on: ubuntu-latest

    # 定义任务的执行步骤
    steps:
      # 第 1 步：检出仓库代码
      # 这会将你仓库中的所有文件（包括 convertRules.js 和 sources.txt）下载到虚拟机中
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 第 2 步：设置 Node.js 环境
      # 指定运行脚本所需的 Node.js 版本
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          # <-- 修改点 1：使用标准的主版本号
          node-version: '22' # 推荐使用稳定的长期支持版本 (LTS)，例如 20 或 22

      # 第 3 步：安装依赖（读取 package.json，即使为空也是必须步骤）
      - name: Install Dependencies
        run: npm install

      # 第 4 步：运行你的主脚本
      - name: Run Script to Generate Rules
        # <-- 修改点 2：使用 npm script 来运行，而不是直接调用 node
        run: npm run generate 

      # 第 5 步：将生成的新文件提交回仓库
      # 这个 Action 会自动检查工作目录中的文件变动（新增/修改），并创建一个新的 commit 推送回仓库
      - name: Commit Generated Files
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          # 定义自动提交的 commit message
          commit_message: "chore(build): Generate new rules" # 使用 chore(...) 格式更专业
          
          # 指定要提交的文件。您原来的设置是正确的！
          # 它会匹配 rules.txt, duplicates_YYYYMMDD.txt 和 sources/ 目录下的所有文件
          file_pattern: "rules.txt duplicates_*.txt sources/*"
          
          # 定义提交者信息，使其看起来像是机器人操作的
          commit_user_name: "github-actions[bot]"
          commit_user_email: "github-actions[bot]@users.noreply.github.com"
